# Security Scan

trigger: none

pr:
  branches:
    include:
      - main
      - master

pool:
  vmImage: 'ubuntu-latest'

variables:
  DOTNET_VERSION: '8.x'

stages:
- stage: FrontendScan
  displayName: Frontend Scan
  condition: |
    or(
      exists('package.json'),
      exists('tsconfig.json')
    )
  jobs:
  - job: 
    displayName: Run Dependency Scan
    steps:

    - script: |
        npm install
        npm audit --audit-level=high --json > npm-audit.json
        cat npm-audit.json
      displayName: 'Run npm audit for vulnerabilities'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish npm audit report'
      inputs:
        PathtoPublish: 'npm-audit.json'
        ArtifactName: 'NpmAuditReport'

    - script: |
        npm install -g retire
        retire --outputformat json --outputpath retire-report.json
      displayName: 'Run Retire.js scan'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Retire.js Report'
      inputs:
        PathtoPublish: 'retire-report.json'
        ArtifactName: 'RetireJsReport'

- stage: BackendScan
  displayName: Backend Scans
  condition: |
    or(
      exists('*.csproj'),
      exists('*.sln')
    )
  jobs:
  - job: RunScans
    displayName: Run Semgrep, Gitleaks, Dependency-Check
    steps:

    - task: UseDotNet@2
      displayName: 'Install .NET SDK'
      inputs:
        packageType: sdk
        version: $(DOTNET_VERSION)

    - checkout: self

    - script: |
        dotnet restore
      displayName: 'Restore NuGet Packages'

    # Semgrep  
    - script: |
        pip install semgrep
      displayName: 'Install Semgrep'

    - script: |
        semgrep scan --config auto --error
      displayName: 'Run Semgrep Scan'

    # Gitleaks
    - script: |
        curl -sSL https://github.com/gitleaks/gitleaks/releases/download/v8.18.2/gitleaks_8.18.2_linux_x64.tar.gz -o gitleaks.tar.gz
        tar -xzf gitleaks.tar.gz
        chmod +x gitleaks
        sudo mv gitleaks /usr/local/bin/gitleaks
      displayName: 'Install Gitleaks'

    - script: |
        mkdir -p $(Build.ArtifactStagingDirectory)/gitleaks
        gitleaks detect \
          --source $(Build.SourcesDirectory) \
          --report-path $(Build.ArtifactStagingDirectory)/gitleaks/gitleaks-report.json \
          --no-banner
      displayName: 'Run Gitleaks'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Gitleaks Report'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/gitleaks'
        ArtifactName: 'GitleaksReport'

    # OWASP dependency scan via Docker
    - script: |
        docker run --rm \
          --env NVD_API_KEY=$(NVD_API_KEY) \
          alpine sh -c 'echo "NVD_API_KEY inside container is: ${NVD_API_KEY:+set}"'
      displayName: 'Verify NVD_API_KEY'

    - script: |
        mkdir -p $(Build.ArtifactStagingDirectory)/dependency
        docker run --rm \
          -e NVD_API_KEY=$(NVD_API_KEY) \
          -v $(Build.SourcesDirectory):/src \
          -v $(Build.ArtifactStagingDirectory)/dependency:/report \
          owasp/dependency-check:latest \
          --project "AzureFunctionApp" \
          --scan /src \
          --nvdApiKey "$(NVD_API_KEY)" \
          --format HTML \
          --enableRetired \
          --out /report \
          --log /report/debug.log || true

        echo "Report contents:"
        ls -lah $(Build.ArtifactStagingDirectory)/dependency
      displayName: 'Run OWASP Dependency-Check'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Dependency-Check Report'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/dependency'
        ArtifactName: 'DependencyReport'

    # OWASP ZAP (turned off for now)
    - script: |
        APP_FOLDER=$(basename $(find $(Build.SourcesDirectory) -mindepth 1 -maxdepth 1 -type d))
        echo "##vso[task.setvariable variable=FunctionFolder]$APP_FOLDER"
      displayName: 'Extract Function App Folder Name'
      condition: false  

    - script: |
        echo "Running OWASP ZAP scan on https://$(FunctionFolder).azurewebsites.net"
        docker run -v $(Build.SourcesDirectory):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py \
          -t https://$(FunctionFolder).azurewebsites.net \
          -r zap-report.html
      displayName: 'Run ZAP Baseline Scan'
      condition: false  

    - task: PublishBuildArtifacts@1
      displayName: 'Publish ZAP Report'
      condition: false
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/zap-report.html'
        ArtifactName: 'ZAPReport'
